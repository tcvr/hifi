<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gondelman on 5/15/19
//  Copyright 2019 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Inputs.slh@>
<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include MeshDeformer.slh@>
<$declareMeshDeformer(1, _SCRIBE_NULL, 1, _SCRIBE_NULL, 1)$>
<$declareMeshDeformerActivation(1, 1)$>

<@include render-utils/ShaderConstants.h@>

layout(location=RENDER_UTILS_ATTR_NORMAL_WS) out vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_NORMAL_MS) out vec3 _normalMS;
layout(location=RENDER_UTILS_ATTR_COLOR) out vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) out vec4 _texCoord01;
layout(location=RENDER_UTILS_ATTR_POSITION_MS) out vec4 _positionMS;
layout(location=RENDER_UTILS_ATTR_POSITION_ES) out vec4 _positionES;

void main(void) {
    vec4 deformedPosition = vec4(0.0, 0.0, 0.0, 0.0);
    vec3 deformedNormal = vec3(0.0, 0.0, 0.0);
    evalMeshDeformer(inPosition, deformedPosition, inNormal.xyz, deformedNormal, 
                    meshDeformer_doSkinning(_drawCallInfo.y), inSkinClusterIndex, inSkinClusterWeight,
                    meshDeformer_doBlendshape(_drawCallInfo.y), gl_VertexID);

    _color = color_sRGBAToLinear(inColor);
    _texCoord01.xy = inTexCoord0.st;
    _positionMS = inPosition;
    _normalMS = inNormal.xyz;

    // standard transform
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToEyeAndClipPos(cam, obj, deformedPosition, _positionES, gl_Position)$>
    <$transformModelToWorldDir(cam, obj, deformedNormal, _normalWS)$>
}